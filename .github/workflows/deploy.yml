name: Deploy to cPanel

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.CPANEL_HOST }}" ]; then
            echo "Error: CPANEL_HOST secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.CPANEL_USER }}" ]; then
            echo "Error: CPANEL_USER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Error: SSH_PRIVATE_KEY secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DEPLOY_PATH }}" ]; then
            echo "Error: DEPLOY_PATH secret is not set"
            exit 1
          fi
          echo "All required secrets are configured"
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Debug: Check if host is reachable
          echo "Testing connection to ${{ secrets.CPANEL_HOST }}..."
          
          # Try different SSH ports (cPanel often uses non-standard ports)
          for port in 22 2222 2223; do
            echo "Trying port $port..."
            if ssh-keyscan -p $port -H ${{ secrets.CPANEL_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Successfully connected on port $port"
              echo "SSH_PORT=$port" >> $GITHUB_ENV
              break
            fi
          done
          
          # Verify known_hosts was populated
          if [ ! -s ~/.ssh/known_hosts ]; then
            echo "Error: Could not establish SSH connection to host"
            echo "Please verify your CPANEL_HOST and ensure SSH access is enabled"
            exit 1
          fi
          
          echo "SSH setup completed successfully"
        
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p ${SSH_PORT:-22} \
              ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} \
              "echo 'SSH connection successful'"
        
      - name: Check for rsync availability
        id: check_rsync
        run: |
          if ssh -o StrictHostKeyChecking=no \
                 -p ${SSH_PORT:-22} \
                 ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} \
                 "command -v rsync" > /dev/null 2>&1; then
            echo "rsync_available=true" >> $GITHUB_OUTPUT
            echo "rsync is available on the server"
          else
            echo "rsync_available=false" >> $GITHUB_OUTPUT
            echo "rsync is not available, will use alternative method"
          fi
      
      - name: Deploy via rsync (if available)
        if: steps.check_rsync.outputs.rsync_available == 'true'
        run: |
          # Create deployment directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no \
              -p ${SSH_PORT:-22} \
              ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} \
              "mkdir -p ${{ secrets.DEPLOY_PATH }}"
          
          # Rsync with proper SSH options
          rsync -avz --delete \
                -e "ssh -o StrictHostKeyChecking=no -p ${SSH_PORT:-22}" \
                --exclude='.git' \
                --exclude='.github' \
                --exclude='node_modules' \
                --exclude='.env*' \
                --exclude='tests' \
                --exclude='phpunit.xml' \
                --exclude='README.md' \
                ./ ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }}:${{ secrets.DEPLOY_PATH }}
          
          echo "Deployment via rsync completed successfully"
      
      - name: Deploy via SCP/SSH (fallback method)
        if: steps.check_rsync.outputs.rsync_available == 'false'
        run: |
          # Create a clean build directory
          mkdir -p ./deploy_build
          
          # Copy files excluding unnecessary ones
          rsync -av --exclude='.git' \
                    --exclude='.github' \
                    --exclude='node_modules' \
                    --exclude='.env*' \
                    --exclude='tests' \
                    --exclude='phpunit.xml' \
                    --exclude='README.md' \
                    --exclude='deploy_build' \
                    ./ ./deploy_build/
          
          # Create tarball of the build
          cd deploy_build
          tar -czf ../deploy.tar.gz .
          cd ..
          
          # Upload tarball
          scp -o StrictHostKeyChecking=no -P ${SSH_PORT:-22} \
              deploy.tar.gz ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }}:/tmp/
          
          # Execute deployment commands directly via SSH
          ssh -o StrictHostKeyChecking=no \
              -p ${SSH_PORT:-22} \
              ${{ secrets.CPANEL_USER }}@${{ secrets.CPANEL_HOST }} << 'DEPLOY_EOF'
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            
            # Create deployment directory
            mkdir -p "$DEPLOY_PATH"
            
           
            
            # Extract and deploy
            cd "$DEPLOY_PATH"
            tar -xzf /tmp/deploy.tar.gz --strip-components=1
            
            # Set proper permissions
            find . -type f -exec chmod 644 {} \; 2>/dev/null || true
            find . -type d -exec chmod 755 {} \; 2>/dev/null || true
            
            # Laravel specific permissions
            chmod -R 755 storage 2>/dev/null || true
            chmod -R 755 bootstrap/cache 2>/dev/null || true
            
            # Ensure required directories exist
            mkdir -p bootstrap/cache
            mkdir -p storage/logs
            mkdir -p storage/framework/cache
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views

            # vite build
            npm install
            chmod +x node_modules/.bin/vite
            chmod +x node_modules/@esbuild/linux-x64/bin/esbuild
            npm run build
            
            # Clean up
            rm -f /tmp/deploy.tar.gz
            
            echo "Deployment completed successfully"
          DEPLOY_EOF
          
          echo "Deployment via SCP/SSH completed successfully"
        
     